"""
Django's settings for bernet project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path

import environ
from django.utils.translation import gettext_lazy as _

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)
BASE_DIR = Path(__file__).resolve().parent.parent

environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = ["*"]

ADMINS_MOBILE_NUMBER = env("ADMINS_MOBILE_NUMBER", default="").split(",")
# Application definition

APP_MODULES = [
    "apps.account",
]
DJANGO_APP = [
    "jazzmin",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sitemaps",
    "django.contrib.gis.geoip2",
]
LIB_MODULES = [
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    {% if cookiecutter.use_simple_history %}
    "simple_history.middleware.HistoryRequestMiddleware",
    {% endif %}
]

PYPI_MODULES = [
    "rest_framework",
    "rest_framework.authtoken",
    "django_filters",
    "corsheaders",
    "compressor",
    "drf_yasg",
    "simple_history",
    "django_extensions",
]

INSTALLED_APPS = [
    *LIB_MODULES,
    *DJANGO_APP,
    *PYPI_MODULES,
    *APP_MODULES,
]

{% if cookiecutter.use_elastic %}
ELASTICSEARCH_DSL = {
    "default": {"hosts": env("ELASTIC_HOST")},
}
{% endif %}

CHARGE_BALANCE_REMINDER_ENOUGH_DAYS = 10
{% if cookiecutter.use_celery %}
CELERY_BEAT_SCHEDULE = {
}
{% endif %}

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = ["*"]
ADMINS = [
    ("{{cookiecutter.first_name}}", "{{cookiecutter.email}}"),
]

LOGGING = {
    "version": 1,
    "formatters": {
        "verbose": {"format": "%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s"},
    },
    "handlers": {
        "console": {"level": "DEBUG", "class": "logging.StreamHandler", "formatter": "verbose"},
        "mail_admins": {"level": "ERROR", "class": "django.utils.log.AdminEmailHandler"},
    },
    "loggers": {
        "django.db.backends": {
            "level": "ERROR",
            "handlers": ["console"],
            "propagate": False,
        },
        "django.request": {
            "handlers": ["console"],
            "level": "ERROR",
            "propagate": False,
        },
    },
}
ROOT_URLCONF = "{{cookiecutter.project_name}}.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "bernet.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    # read os.environ['DATABASE_URL'] and raises
    # ImproperlyConfigured exception if not found
    #
    # The db() method is an alias for db_url().
    "default": env.db(),
}

CACHES = {
    # Read os.environ['CACHE_URL'] and raises
    # ImproperlyConfigured exception if not found.
    #
    # The cache() method is an alias for cache_url().
    "default": env.cache(),
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGES = (
    ("fa", _("Persian")),
    ("en", _("English")),
)

LANGUAGE_CODE = "fa"

TIME_ZONE = "Asia/Tehran"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_ROOT = BASE_DIR / "static"
STATIC_URL = "/static/"
STATICFILES_DIRS = [
    BASE_DIR / "staticfiles",
]

MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL = "media/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "account.User"


CORS_ALLOW_ALL_ORIGINS = True

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ]
}

CKEDITOR_UPLOAD_PATH = "uploads/"

CKEDITOR_CONFIGS = {
    "default": {
        "toolbar": "full",
    },
}
{% if cookiecutter.use_kavenegar %}
KAVENEGAR_AUTH_TOKEN = env("KAVENEGAR_AUTH_TOKEN")
KAVENEGAR_SENDER_LINE = "10008663"
{% endif %}

# celery Conf
{% if cookiecutter.use_celery %}
CELERY_BROKER_URL = f"redis://{env('REDIS_HOST')}/2"
CELERY_RESULT_BACKEND = f"redis://{env('REDIS_HOST')}"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
{% endif %}



# swagger Conf
SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Basic": {"type": "basic"},
        "Token": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "description": 'Add word "Token " before your token value',
        },
    }
}


LOCALE_PATHS = [BASE_DIR / "locale"]


STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    # other finders..
    "compressor.finders.CompressorFinder",
)


COMPRESS_ENABLED = True

THUMBNAIL_COLORSPACE = None
THUMBNAIL_PRESERVE_FORMAT = True

EMAIL_HOST = env("EMAIL_HOST")
EMAIL_PORT = env("EMAIL_PORT")
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS = env("EMAIL_USE_TLS")
SERVER_EMAIL = "noreply@bernetco.ir"

SERVE_STRATEGY = env("SERVE_STRATEGY", default="local")

if SERVE_STRATEGY == "local":
    DEBUG = True
    # ELASTIC_APM_DISABLE_SEND = True
    {% if cookiecutter.use_elastic %}
    INSTALLED_APPS.append("django_elasticsearch_dsl")
    {% endif %}
    MIDDLEWARE.append("debug_toolbar.middleware.DebugToolbarMiddleware")
    INSTALLED_APPS.append("drf_generators")
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

elif SERVE_STRATEGY == "production":
    {% if cookiecutter.use_elastic %}
    INSTALLED_APPS.append("elasticapm.contrib.django")
    INSTALLED_APPS.append("django_elasticsearch_dsl")
    ELASTIC_APM = {
        "SERVICE_NAME": "dashboard-v2-django",
        "SECRET_TOKEN": env("APM_SERVER_TOKEN"),
        "SERVER_URL": env("APM_SERVER_URL"),
        "DEBUG": "True",
    }
    LOGGING["handlers"]["elasticapm"] = {
        "level": "WARNING",
        "class": "elasticapm.contrib.django.handlers.LoggingHandler",
    }
    LOGGING["loggers"]["elasticapm.errors"] = {
        "level": "ERROR",
        "handlers": ["console"],
        "propagate": False,
    }
    LOGGING["loggers"]["django"] = {
        "level": "WARNING",
        "handlers": ["elasticapm"],
        "propagate": False,
    }
    MIDDLEWARE.append("elasticapm.contrib.django.middleware.TracingMiddleware")
    { % endif %}
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

    LOGGING["disable_existing_loggers"] = True
    LOGGING["loggers"]["django.request"] = {
        "handlers": ["mail_admins"],
        "level": "ERROR",
        "propagate": False,
    }
else:  # test
    DEBUG = False

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": "db.sqlite3",
        }
    }
    {% if cookiecutter.use_elastic %}
    ELASTIC_APM_DISABLE_SEND = True
    {% endif %}
    {% if cookiecutter.use_celery %}
    CELERY_BROKER_BACKEND = "memory"
    CELERY_TASK_ALWAYS_EAGER = True
    CELERY_TASK_EAGER_PROPAGATES = True
    {% endif %}
    PASSWORD_HASHERS = ["django.contrib.auth.hashers.MD5PasswordHasher"]
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        }
    }

JAZZMIN_SETTINGS = {
    "site_title": "{{cookiecutter.project_name}} Admin",
    "site_header": "{{cookiecutter.project_name}}",
    "site_brand": "{{cookiecutter.project_name}}",
    "site_logo": "images/favicon.png",
    "site_logo_classes": "img-circle",
    "welcome_sign": "Welcome to the {{cookiecutter.project_name}} Admin",
    "copyright": "Bernetco.ir",
    "search_model": ["account.User"],
    "topmenu_links": [
        {"name": "Home", "url": "admin:index", "permissions": ["auth.view_user"]},
        {"model": "auth.User"},
        {"app": "account"},
    ],
    "usermenu_links": [
        {"model": "auth.user"},
    ],
    "show_sidebar": True,
    "navigation_expanded": True,
    "hide_apps": ["auth"],
    "hide_models": [],
    "order_with_respect_to": ["account", ],
    "icons": {
        "account": "fas fa-users-cog",
        "account.user": "fas fa-user",
        "account.role": "fas fa-users",
    },
    "default_icon_parents": "fas fa-chevron-circle-right",
    "default_icon_children": "fas fa-circle",
    "related_modal_active": False,
    "custom_js": None,
    "show_ui_builder": True,
    "changeform_format": "vertical_tabs",
    "changeform_format_overrides": {
        "project.project": "vertical_tabs",
        "project.hourlybudgetproject": "vertical_tabs",
        "project.periodbudgetproject": "vertical_tabs",
    },
    "language_chooser": True,
}

JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": False,
    "brand_small_text": False,
    "brand_colour": False,
    "accent": "accent-primary",
    "navbar": "navbar-dark",
    "no_navbar_border": False,
    "navbar_fixed": True,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": True,
    "sidebar": "sidebar-dark-primary",
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": False,
    "sidebar_nav_compact_style": True,
    "sidebar_nav_legacy_style": False,
    "sidebar_nav_flat_style": True,
    "theme": "minty",
    "dark_mode_theme": None,
    "button_classes": {
        "primary": "btn-primary",
        "secondary": "btn-secondary",
        "info": "btn-info",
        "warning": "btn-warning",
        "danger": "btn-danger",
        "success": "btn-success",
    },
    "actions_sticky_top": True,
}
